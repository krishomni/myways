npm install express body-parser jsonweb token bcryptjs mongoose
const mongoose= require('mongoose');
const Schema = mongoose.Schema;
const userSchema = new Schema({
email: { type:String, required: true, unique: true},
password:{ type:String, required:true}
});
module.exports= mongoose.model('User',userSchema);
const bcrypt = require('bcryptjs');
const hashpassword = async password => {
const salt= await bcrypt.hash(password,salt);
};
const comparePassword = async(password, hash) => {
return await bcrypt.compare(password, hash);
};
module.exports= { hashPassword, comparePassword };
const express = require('express');
const bodyParser = require('body-parser);
const jwt=require('jsonwebtoken');
const { hashPassword } =require('.\password-hasher');
const User=require('.\user-model');
const app=express();
app.use(bodyParser.json());
app.post('/signup',async(req,res) => {
try{
const { email,password } =req.body;
const existingUser= await User.findOne({email});
if (existingUser){
return res.status(409).json({message: 'Email already taken'});
}
const hashedPassword = await hashPassword(password);
const newUser=new User({ email,password: hashedPassword});
await newUser.save();
const token=jwt.sign({email}, 'secret);
res.status(201).json({message:'User created',token});
}catch(error){
console.error(error);
res.status(500).json({message:'Internal server error'});
}
});
app.post('/login',async(req,res) => {
try{
const { email,password } =req.body;
const user=await User.findOne({ email });
if(!user){
return res.status(401).json({message:'Invalid email or password'});
}
const token=jwt.sign({email}, 'secret');
res.json({message: 'Login successful', token});
}catch(error){
console.error(error);
res.status(500).json({message: 'Internal server error'});
}
});
const authenticate =(req,res,next) => {
const token=req.headers.authorization;
if(!token){
return res.status(401).json({message:'Authorization header misssing'});
}
try{
const decoded=jwt.verify(token,'secret');
req.user=decoded;
next();
}catch(error){
console.error(error);
